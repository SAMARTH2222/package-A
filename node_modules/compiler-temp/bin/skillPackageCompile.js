#!/usr/bin/env node

const { Command } = require('commander');
const path = require('path');
const fs = require('fs');
const locale = 'en-US';
const skillDir = '.';
const srcPath = path.join(skillDir, '/src');
const buildPath = path.join(skillDir, '/build');
const compiledSrcPath = path.join(buildPath, '/compiled-src');
const metadataPath = path.join(buildPath, '/metadata');
const inputFilePath = path.join(metadataPath, '/input-file.lst');
const outputFilePath = path.join(metadataPath, '/output-file.lst');
const logsPath = path.join(buildPath, '/logs');
const consoleLogsPath = path.join(logsPath, '/console.log');
const askirExtension = ".askir.json";

const smapiPackageDir = './.ask/smapi-package';
const dialogManagementPath = path.join(smapiPackageDir, '/dialogManagement');
const rawArtifactsPath = path.join(smapiPackageDir, '/rawArtifacts');
const askirFilePath = path.join(dialogManagementPath, '/alexaConversations/', locale, '/sampleDialogs/');
const program = new Command();
program.version('0.0.1');
 
program
  .option('--outDir <outDir>', 'output directory');
 
program.parse(process.argv);
 
console.log('out dir:' + program.outDir + '\n');

fs.mkdirSync(buildPath, { recursive: true }, (err) => {
  if (err) console.error("Error: " + err);
});

fs.mkdirSync(compiledSrcPath, { recursive: true }, (err) => {
  if (err) console.error("Error: " + err);
});

fs.mkdirSync(metadataPath, { recursive: true }, (err) => {
  if (err) console.error("Error: " + err);
});

fs.mkdirSync(logsPath, { recursive: true }, (err) => {
  if (err) console.error("Error: " + err);
});

fs.writeFile(inputFilePath, "", (err) => {
  if (err) return console.error("Error: " + err);
});

fs.writeFile(outputFilePath, "", (err) => {
  if (err) return console.error("Error: " + err);
});

fs.readdir(srcPath, (err, files) => {
  files.forEach(file => {
    const fileName = file.split(".")[0];
    fs.writeFile(compiledSrcPath + "/" + fileName + askirExtension, "{}", (err) => {
      if (err) return console.error("Error: " + err);
    });
    console.log(file);

    fs.appendFile(inputFilePath, srcPath + "/" + file + "\n", function (err) {
      if (err) return console.error("Error: " + err);
    });

    fs.appendFile(outputFilePath, compiledSrcPath + "/" + fileName + askirExtension + "\n", function (err) {
      if (err) return console.error("Error: " + err);
    });
  });
});

fs.writeFile(consoleLogsPath, "!!! Compilation Successful !!!", (err) => {
  if (err) return console.error("Error: " + err);
});

// Following steps need to occur in sync and in-order

// remove already existing smapi-package if any and copy the current skill-package skeleton to smapi-package
/*const removeAndCopyCommand = `rm -rf ${smapiPackageDir} && cp -r ${skillDir} ${smapiPackageDir}`;
execSync(removeAndCopyCommand, (error) => {
  if (error !== null) {
    console.error("Error: " + error);
  }
});

// updating the dialogManagement folder name to rawArtifacts (as it will contain raw acdl files)
fs.renameSync(dialogManagementPath, rawArtifactsPath, (err) => {
  if (err) {
    console.error("Error: " + error);
  }
  console.log('compile packaged created successfully');
});

// create directory to store askir files.
fs.mkdirSync(askirFilePath, { recursive: true }, (err) => {
  if (err) console.error("Error: " + err);
});

// creating askir files.
askirFiles.forEach(({ name, content }) => {
  fs.writeFile(path.join(askirFilePath, name), content, (err) => {
    if (err) return console.error("Error: " + err);
  });
});*/